# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Hive Pics Frontend CI

on:
  push:
    branches: [ "main" ]
    paths:
      - 'hive-pics-frontend/**'
      - '.github/workflows/hive-pics-frontend.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'hive-pics-frontend/**'
      - '.github/workflows/hive-pics-frontend.yml'

jobs:

  # 1. Compatibility Tests: Run on PRs or regularly to track regressions.
  compatibility-test:
    name: Compatibility Tests (Matrix)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
        node-version: [22.x, 24.x]
    defaults:
      run:
        working-directory: hive-pics-frontend
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          cache: 'npm'
          node-version: ${{ matrix.node-version }}
          cache-dependency-path: hive-pics-frontend/package-lock.json
      - run: npm ci
      - run: npm run build --if-present
      - run: npm run test:unit -- --run

  # 2. Build & Test for Current Production Runtime
  build:
    name: Build and Unit Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: hive-pics-frontend
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js 22.x
      uses: actions/setup-node@v4
      with:
        cache: 'npm'
        node-version: 22.x
        cache-dependency-path: hive-pics-frontend/package-lock.json
    - run: npm ci
    - run: npm run build --if-present
    - run: npm run test:unit -- --run
      # Upload the build artifacts for the docker job
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: hive-pics-frontend/dist

  # 3. Build Docker Image from Production Build
  docker:
    name: Docker Build
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        # Download the build artifacts
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: hive-pics-frontend/dist
        # See https://github.com/google-github-actions/auth?tab=readme-ov-file#workload-identity-federation-through-a-service-account
      - uses: 'google-github-actions/auth@v2'
        with:
          service_account: 'github-actions@hive-pics.iam.gserviceaccount.com'
          workload_identity_provider: 'projects/397434637430/locations/global/workloadIdentityPools/github-actions/providers/hive-pics'
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker europe-docker.pkg.dev --quiet
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: 'europe-docker.pkg.dev/hive-pics/containers/hive-pics-frontend'
          tags: |
            type=raw,value=latest
            type=sha,prefix=
            type=ref,event=branch
            type=semver,pattern={{version}}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: hive-pics-frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          platforms: linux/amd64
      - id: 'deploy'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          region: 'europe-west1'
          service: 'hive-pics'
          image: 'europe-docker.pkg.dev/hive-pics/containers/hive-pics-frontend'

# 4. Deploy to Dev/Test Environment
# 5. E2E Tests (e.g., Playwright, Cypress)
# 6. Deploy to Production (Only on Main / Manual Trigger)