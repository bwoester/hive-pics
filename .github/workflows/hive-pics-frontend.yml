# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Hive Pics Frontend CI

on:
  push:
    branches: [ "main" ]
    paths:
      - 'hive-pics-frontend/**'
      - '.github/workflows/hive-pics-frontend.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'hive-pics-frontend/**'
      - '.github/workflows/hive-pics-frontend.yml'

jobs:

  validate:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: hive-pics-frontend
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          cache: 'npm'
          node-version: 22.x
          cache-dependency-path: hive-pics-frontend/package-lock.json
      - run: npm ci
      # Quality checks
      - run: npm run type-check
      - run: npm run lint:check
      - run: npm run format:check
      # Security checks
      - run: npm audit

  # 1. Compatibility Tests: Run on PRs or regularly to track regressions.
  compatibility-test:
    name: Compatibility Tests (Matrix)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
        node-version: [22.x, 24.x]
    defaults:
      run:
        working-directory: hive-pics-frontend
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          cache: 'npm'
          node-version: ${{ matrix.node-version }}
          cache-dependency-path: hive-pics-frontend/package-lock.json
      - run: npm ci
      - run: npm run build --if-present
      - run: npm run test:unit:ci

  # 2. Build & Test for Current Production Runtime
  build:
    needs: [validate]
    name: Build and Unit Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: hive-pics-frontend
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js 22.x
      uses: actions/setup-node@v4
      with:
        cache: 'npm'
        node-version: 22.x
        cache-dependency-path: hive-pics-frontend/package-lock.json
    - run: npm ci
    - run: npm run build --if-present
    - run: npm run test:unit:ci
      # Upload the build artifacts for the docker job
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: hive-pics-frontend/dist

  # 3. Deploy to Firebase Hosting
  firebase:
    name: Deploy to Firebase Hosting
    needs: [build]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: hive-pics-frontend
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          cache: 'npm'
          node-version: 22.x
          cache-dependency-path: hive-pics-frontend/package-lock.json
      - run: npm ci
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: hive-pics-frontend/dist
      - name: Deploy to Firebase Hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: npm run deploy

# 4. Deploy to Dev/Test Environment
# 5. E2E Tests (e.g., Playwright, Cypress)
# 6. Deploy to Production (Only on Main / Manual Trigger)